Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.
(Knuth–Morris–Pratt (KMP) Algorithm)

solution:


def constructLps(pat, lps):
    
    # len stores the length of longest prefix which is also a suffix for the previous index
    len_ = 0
    m = len(pat)
    
    # lps[0] is always 0
    lps[0] = 0

    i = 1
    while i < m:
        if pat[i] == pat[len_]:
            len_ += 1
            lps[i] = len_
            i += 1
        
        # If there is a mismatch
        else:
            if len_ != 0:
                len_ = lps[len_ - 1]
            else:
                lps[i] = 0
                i += 1

def search(pat, txt):
    n = len(txt)
    m = len(pat)

    lps = [0] * m
    res = []

    constructLps(pat, lps)
    i = 0
    j = 0

    while i < n:
        
        if txt[i] == pat[j]:
            i += 1
            j += 1

            if j == m:
                res.append(i - j)
                j = lps[j - 1]
        
        # If there is a mismatch
        else:
        
            if j != 0:
                j = lps[j - 1]
            else:
                i += 1
    return res 

if _name_ == "_main_":
    txt = "aabaacaadaabaaba"
    pat = "aaba"

    res = search(pat, txt)
    for i in range(len(res)):
        print(res[i], end=" ")
